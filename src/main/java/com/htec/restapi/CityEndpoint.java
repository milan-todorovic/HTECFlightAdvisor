package com.htec.restapi;

import com.htec.model.City;
import com.htec.service.ICityService;

import javax.annotation.security.RolesAllowed;
import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

/**
 * Enables interaction with city data, and exposes them as REST API.
 */
@Path("/cities")
public class CityEndpoint {

    @Inject
    ICityService cityService;

    /**
     * Returns all cities stored in database together with corresponding comments.
     *
     * @param numberOfComments number of comments to return. If 0 all comments are returned.
     * @return JSON representation of cities list together with response status
     */
    @RolesAllowed({"ADMIN", "REGULAR"})
    @Path("/get-cities")
    @POST
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCities(@FormParam("numberOfComments") int numberOfComments) {

        List<City> cities = cityService.findAll(numberOfComments);

        if (!cities.isEmpty()) {

            return Response.ok(cities).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    /**
     * Returns city stored in database based on its primary key/id.
     *
     * @param id primary key/id of city to be matched by search
     * @return JSON representation of city that is found together with response status
     */
    @RolesAllowed({"ADMIN", "REGULAR"})
    @Path("/find-city/{id}")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Response findCity(@PathParam("id") Long id) {

        City city = cityService.find(id);

        if (city.getIdCity() != null) {
            return Response.ok(city).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    /**
     * Returns list of stored cities in database based on cities name together with corresponding comments.
     *
     * @param name name of city to be matched by search
     * @param numberOfComments number of comments to return. If 0 all comments are returned.
     * @return JSON representation of cities that is found together with response status
     */
    @RolesAllowed({"ADMIN", "REGULAR"})
    @Path("/find-city-by-name")
    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response findCityByName(@FormParam("name") String name,
                                   @FormParam("numberOfComments") int numberOfComments) {

        List<City> city = cityService.findByName(name, numberOfComments);

        if (city.size() > 0) {
            return Response.ok(city).build();
        } else {
            return Response.status(Response.Status.NOT_FOUND).build();
        }
    }

    /**
     * Save new city inside database. Primary key/id is autogenerated.
     *
     * @param name        name of city to be stored
     * @param country     country of city do be stored
     * @param description description of city to be stored.
     * @return confirmation status if update was successful
     */
    @RolesAllowed("ADMIN")
    @Path("/save-city")
    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public Response saveCity(@FormParam("name") String name,
                             @FormParam("country") String country,
                             @FormParam("description") String description) {

        City city = City.builder()
                .name(name)
                .country(country)
                .description(description).build();

        boolean r = cityService.save(city);

        if (r) {
            return Response.ok().status(Response.Status.CREATED).build();
        } else {
            return Response.notModified().build();
        }
    }

    /**
     * Update a city stored inside database.
     *
     * @param name        new name of city to be updated
     * @param country     new country of city to be updated
     * @param description new description of city to be updated
     * @param id          id of existing city which parameters will be updated
     * @return confirmation status if update was successful
     */
    @RolesAllowed("ADMIN")
    @Path("/update-city/{id}")
    @PUT
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public Response updateCity(@FormParam("name") String name,
                               @FormParam("country") String country,
                               @FormParam("description") String description,
                               @PathParam("id") Long id) {

        City city = City.builder()
                .name(name)
                .country(country)
                .description(description).build();

        boolean r = cityService.update(city, id);

        if (r) {
            return Response.ok().status(Response.Status.NO_CONTENT).build();
        } else {
            return Response.notModified().build();
        }
    }

    /**
     * Delete a city stored in database based on primary key/id.
     *
     * @param id primary key/id of city to be deleted.
     * @return confirmation status if deletion was successful
     */
    @RolesAllowed("ADMIN")
    @Path("/delete-city/{id}")
    @DELETE
    @Produces(MediaType.APPLICATION_JSON)
    public Response deleteCity(@PathParam("id") Long id) {

        boolean r = cityService.delete(id);

        if (r) {
            return Response.ok().status(Response.Status.NO_CONTENT).build();
        } else {
            return Response.notModified().build();
        }
    }
}
